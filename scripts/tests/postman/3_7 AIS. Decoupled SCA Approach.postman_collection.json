{
  "info": {
    "_postman_id": "c75592b2-e183-4d17-8913-6b7375d76cb4",
    "name": "3_7 AIS. Decoupled SCA Approach",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Decoupled",
      "item": [
        {
          "name": "1. Creates AIS consent",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6f709a09-78fc-40ce-8274-dc29bbcd560e",
                "exec": [
                  "pm.globals.unset(\"consent_id\");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "27c858ba-9ceb-426a-8e5d-438f019c0598",
                "exec": [
                  "pm.test(\"Status code is 201\", () => {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Consent status is received\", () => {",
                  "    pm.expect(jsonData.consentStatus).to.eql('received');",
                  "});",
                  "",
                  "pm.globals.set(\"consent_id\", jsonData.consentId);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "date",
                "value": "Sun, 11 Aug 2019 15:02:37 GMT"
              },
              {
                "key": "tpp-qwac-certificate",
                "value": "qwac certificate"
              },
              {
                "key": "x-request-id",
                "value": "{{x_request_id}}"
              },
              {
                "key": "PSU-ID",
                "value": "{{psu_id_none}}"
              },
              {
                "key": "TPP-Explicit-Authorisation-Preferred",
                "value": "true",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n      \"access\": {\n        \"accounts\": [\n          {\n            \"currency\": \"EUR\",\n            \"iban\": \"{{iban_none}}\"\n          }\n        ],\n        \"balances\": [\n          {\n            \"currency\": \"EUR\",\n            \"iban\": \"{{iban_none}}\"\n          }\n        ],\n        \"transactions\": [\n          {\n            \"currency\": \"EUR\",\n            \"iban\": \"{{iban_none}}\"\n          }\n        ]\n      },\n      \"combinedServiceIndicator\": false,\n      \"frequencyPerDay\": 400,\n      \"recurringIndicator\": true,\n      \"validUntil\": \"9999-12-31\"\n    }"
            },
            "url": {
              "raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
              "protocol": "{{protocol}}",
              "host": [
                "{{url_xs2a}}"
              ],
              "path": [
                "v1",
                "consents"
              ]
            },
            "description": "This method create a consent resource, defining access rights to dedicated accounts of a given PSU-ID. These accounts are addressed explicitly in the method as parameters as a core function. Side Effects When this Consent Request is a request where the “recurringIndicator” equals \"true\", and if it exists already a former consent for recurring access on account information for the addressed PSU, then the former consent automatically expires as soon as the new consent request is authorised by the PSU. Optional Extension: As an option, an ASPSP might optionally accept a specific access right on the access on all psd2 related services for all available accounts. As another option an ASPSP might optionally also accept a command, where only access rights are inserted without mentioning the addressed account. The relation to accounts is then handled afterwards between PSU and ASPSP. This option is supported only within the Decoupled, OAuth2 or Re-direct SCA Approach. As a last option, an ASPSP might in addition accept a command with access rights * to see the list of available payment accounts or * to see the list of available payment accounts with balances."
          },
          "response": []
        },
        {
          "name": "2. Start the authorisation process for a consent",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "898a97c1-12fd-4166-82b5-9a8f4fc1106c",
                "exec": [
                  "pm.test(\"Status code is 200\", () => {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Sca status is psuAuthenticated\", () => {",
                  "    pm.expect(jsonData.scaStatus).to.eql('psuAuthenticated');",
                  "});",
                  "",
                  "// splits string link by '/' to array and gets the last element - authorisationId",
                  "// e.g. \"http://localhost:8080/v1/consents/d917f39f-6308-4f81-9b51-bfbd8bc934c6/authorisations/554fda7d-bc70-44da-8670-15e299f817a6\"",
                  "      // needs to get 554fda7d-bc70-44da-8670-15e299f817a6 value",
                  "const authorisationId = jsonData._links.startAuthorisationWithPsuAuthentication.split('/').pop();",
                  "",
                  "pm.globals.set(\"authorisation_id\", authorisationId);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "befc2b29-5dab-4f51-b077-032638f06ac0",
                "exec": [
                  "pm.globals.unset(\"authorisation_id\");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Request-ID",
                "value": "{{x_request_id}}"
              },
              {
                "key": "PSU-ID",
                "value": "{{psu_id_none}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
              "protocol": "{{protocol}}",
              "host": [
                "{{url_xs2a}}"
              ],
              "path": [
                "v1",
                "consents",
                "{{consent_id}}",
                "authorisations"
              ]
            },
            "description": "Create an authorisation sub-resource and start the authorisation process of a consent. The message might in addition transmit authentication and authorisation related data. his method is iterated n times for a n times SCA authorisation in a corporate context, each creating an own authorisation sub-endpoint for the corresponding PSU authorising the consent. The ASPSP might make the usage of this access method unnecessary, since the related authorisation resource will be automatically created by the ASPSP after the submission of the consent data with the first POST consents call. The start authorisation process is a process which is needed for creating a new authorisation or cancellation sub-resource. This applies in the following scenarios: * The ASPSP has indicated with an ‘startAuthorisation’ hyperlink in the preceeding Payment Initiation Response that an explicit start of the authorisation process is needed by the TPP. The ‘startAuthorisation’ hyperlink can transport more information about data which needs to be uploaded by using the extended forms. * 'startAuthorisationWithPsuIdentfication’, * ‘startAuthorisationWithPsuAuthentication’ * ‘startAuthorisationWithAuthentciationMethodSelection’ * The related payment initiation cannot yet be executed since a multilevel SCA is mandated. * The ASPSP has indicated with an ‘startAuthorisation’ hyperlink in the preceeding Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP. The ‘startAuthorisation’ hyperlink can transport more information about data which needs to be uploaded by using the extended forms as indicated above. * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for executing the cancellation. * The signing basket needs to be authorised yet."
          },
          "response": []
        },
        {
          "name": "3. Update PSU Data - psuData",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b3391c15-edc1-4d97-b687-a3c887f07685",
                "exec": [
                  "pm.test(\"Status code is 200\", () => {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Request-ID",
                "value": "{{x_request_id}}"
              },
              {
                "key": "PSU-ID",
                "value": "{{psu_id_none}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
            },
            "url": {
              "raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
              "protocol": "{{protocol}}",
              "host": [
                "{{url_xs2a}}"
              ],
              "path": [
                "v1",
                "consents",
                "{{consent_id}}",
                "authorisations",
                "{{authorisation_id}}"
              ]
            },
            "description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
          },
          "response": []
        }
      ]
    },
    {
      "name": "From embedded one SCA method",
      "item": [
        {
          "name": "1. Creates AIS consent",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6f709a09-78fc-40ce-8274-dc29bbcd560e",
                "exec": [
                  "pm.globals.unset(\"consent_id\");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "27c858ba-9ceb-426a-8e5d-438f019c0598",
                "exec": [
                  "pm.test(\"Status code is 201\", () => {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Consent status is received\", () => {",
                  "    pm.expect(jsonData.consentStatus).to.eql('received');",
                  "});",
                  "",
                  "pm.globals.set(\"consent_id\", jsonData.consentId);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "date",
                "value": "Sun, 11 Aug 2019 15:02:37 GMT"
              },
              {
                "key": "tpp-qwac-certificate",
                "value": "qwac certificate"
              },
              {
                "key": "x-request-id",
                "value": "{{x_request_id}}"
              },
              {
                "key": "PSU-ID",
                "value": "{{psu_id_single_decoupled}}"
              },
              {
                "key": "TPP-Explicit-Authorisation-Preferred",
                "value": "true",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n      \"access\": {\n        \"accounts\": [\n          {\n            \"currency\": \"EUR\",\n            \"iban\": \"{{iban_single}}\"\n          }\n        ],\n        \"balances\": [\n          {\n            \"currency\": \"EUR\",\n            \"iban\": \"{{iban_single}}\"\n          }\n        ],\n        \"transactions\": [\n          {\n            \"currency\": \"EUR\",\n            \"iban\": \"{{iban_single}}\"\n          }\n        ]\n      },\n      \"combinedServiceIndicator\": false,\n      \"frequencyPerDay\": 400,\n      \"recurringIndicator\": true,\n      \"validUntil\": \"9999-12-31\"\n    }"
            },
            "url": {
              "raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
              "protocol": "{{protocol}}",
              "host": [
                "{{url_xs2a}}"
              ],
              "path": [
                "v1",
                "consents"
              ]
            },
            "description": "This method create a consent resource, defining access rights to dedicated accounts of a given PSU-ID. These accounts are addressed explicitly in the method as parameters as a core function. Side Effects When this Consent Request is a request where the “recurringIndicator” equals \"true\", and if it exists already a former consent for recurring access on account information for the addressed PSU, then the former consent automatically expires as soon as the new consent request is authorised by the PSU. Optional Extension: As an option, an ASPSP might optionally accept a specific access right on the access on all psd2 related services for all available accounts. As another option an ASPSP might optionally also accept a command, where only access rights are inserted without mentioning the addressed account. The relation to accounts is then handled afterwards between PSU and ASPSP. This option is supported only within the Decoupled, OAuth2 or Re-direct SCA Approach. As a last option, an ASPSP might in addition accept a command with access rights * to see the list of available payment accounts or * to see the list of available payment accounts with balances."
          },
          "response": []
        },
        {
          "name": "2. Start the authorisation process for a consent",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "898a97c1-12fd-4166-82b5-9a8f4fc1106c",
                "exec": [
                  "pm.test(\"Status code is 201\", () => {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Sca status is psuAuthenticated\", () => {",
                  "    pm.expect(jsonData.scaStatus).to.eql('started');",
                  "});",
                  "",
                  "// splits string link by '/' to array and gets the last element - authorisationId",
                  "// e.g. \"http://localhost:8080/v1/consents/d917f39f-6308-4f81-9b51-bfbd8bc934c6/authorisations/554fda7d-bc70-44da-8670-15e299f817a6\"",
                  "      // needs to get 554fda7d-bc70-44da-8670-15e299f817a6 value",
                  "const authorisationId = jsonData._links.startAuthorisationWithPsuAuthentication.split('/').pop();",
                  "",
                  "pm.globals.set(\"authorisation_id\", authorisationId);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "befc2b29-5dab-4f51-b077-032638f06ac0",
                "exec": [
                  "pm.globals.unset(\"authorisation_id\");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Request-ID",
                "value": "{{x_request_id}}"
              },
              {
                "key": "PSU-ID",
                "value": "{{psu_id_single_decoupled}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
              "protocol": "{{protocol}}",
              "host": [
                "{{url_xs2a}}"
              ],
              "path": [
                "v1",
                "consents",
                "{{consent_id}}",
                "authorisations"
              ]
            },
            "description": "Create an authorisation sub-resource and start the authorisation process of a consent. The message might in addition transmit authentication and authorisation related data. his method is iterated n times for a n times SCA authorisation in a corporate context, each creating an own authorisation sub-endpoint for the corresponding PSU authorising the consent. The ASPSP might make the usage of this access method unnecessary, since the related authorisation resource will be automatically created by the ASPSP after the submission of the consent data with the first POST consents call. The start authorisation process is a process which is needed for creating a new authorisation or cancellation sub-resource. This applies in the following scenarios: * The ASPSP has indicated with an ‘startAuthorisation’ hyperlink in the preceeding Payment Initiation Response that an explicit start of the authorisation process is needed by the TPP. The ‘startAuthorisation’ hyperlink can transport more information about data which needs to be uploaded by using the extended forms. * 'startAuthorisationWithPsuIdentfication’, * ‘startAuthorisationWithPsuAuthentication’ * ‘startAuthorisationWithAuthentciationMethodSelection’ * The related payment initiation cannot yet be executed since a multilevel SCA is mandated. * The ASPSP has indicated with an ‘startAuthorisation’ hyperlink in the preceeding Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP. The ‘startAuthorisation’ hyperlink can transport more information about data which needs to be uploaded by using the extended forms as indicated above. * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for executing the cancellation. * The signing basket needs to be authorised yet."
          },
          "response": []
        },
        {
          "name": "3. Update PSU Data - psuData",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d0c9c8a0-15b4-4538-8de2-0dc94cee4229",
                "exec": [
                  "pm.test(\"Status code is 200\", () => {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Sca status is scaMethodSelected\", () => {",
                  "    pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
                  "});",
                  "",
                  "pm.test(\"SCA status link exists\", () => {",
                  "    pm.expect(jsonData).to.have.property('_links');",
                  "    const _links = jsonData._links;",
                  "    pm.expect(_links).to.have.property('scaStatus');",
                  "});",
                  "",
                  "pm.test(\"PSU message is present\", () => {",
                  "    pm.expect(jsonData).to.have.property('psuMessage');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Request-ID",
                "value": "{{x_request_id}}"
              },
              {
                "key": "PSU-ID",
                "value": "{{psu_id_single_decoupled}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
            },
            "url": {
              "raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
              "protocol": "{{protocol}}",
              "host": [
                "{{url_xs2a}}"
              ],
              "path": [
                "v1",
                "consents",
                "{{consent_id}}",
                "authorisations",
                "{{authorisation_id}}"
              ]
            },
            "description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
          },
          "response": []
        }
      ],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "c58164aa-84a7-4f4e-855e-72820551c4b7",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "2dbe4afb-19b0-4ac3-a4ee-b26c43f7934a",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ]
    },
    {
      "name": "From embedded multiple SCA methods",
      "item": [
        {
          "name": "1. Creates AIS consent",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6f709a09-78fc-40ce-8274-dc29bbcd560e",
                "exec": [
                  "pm.globals.unset(\"consent_id\");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "27c858ba-9ceb-426a-8e5d-438f019c0598",
                "exec": [
                  "pm.test(\"Status code is 201\", () => {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Consent status is received\", () => {",
                  "    pm.expect(jsonData.consentStatus).to.eql('received');",
                  "});",
                  "",
                  "pm.globals.set(\"consent_id\", jsonData.consentId);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "date",
                "value": "Sun, 11 Aug 2019 15:02:37 GMT"
              },
              {
                "key": "tpp-qwac-certificate",
                "value": "qwac certificate"
              },
              {
                "key": "x-request-id",
                "value": "{{x_request_id}}"
              },
              {
                "key": "PSU-ID",
                "value": "{{psu_id_multiple_decoupled}}"
              },
              {
                "key": "TPP-Explicit-Authorisation-Preferred",
                "value": "true",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n      \"access\": {\n        \"accounts\": [\n          {\n            \"currency\": \"EUR\",\n            \"iban\": \"{{iban_single}}\"\n          }\n        ],\n        \"balances\": [\n          {\n            \"currency\": \"EUR\",\n            \"iban\": \"{{iban_single}}\"\n          }\n        ],\n        \"transactions\": [\n          {\n            \"currency\": \"EUR\",\n            \"iban\": \"{{iban_single}}\"\n          }\n        ]\n      },\n      \"combinedServiceIndicator\": false,\n      \"frequencyPerDay\": 400,\n      \"recurringIndicator\": true,\n      \"validUntil\": \"9999-12-31\"\n    }"
            },
            "url": {
              "raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
              "protocol": "{{protocol}}",
              "host": [
                "{{url_xs2a}}"
              ],
              "path": [
                "v1",
                "consents"
              ]
            },
            "description": "This method create a consent resource, defining access rights to dedicated accounts of a given PSU-ID. These accounts are addressed explicitly in the method as parameters as a core function. Side Effects When this Consent Request is a request where the “recurringIndicator” equals \"true\", and if it exists already a former consent for recurring access on account information for the addressed PSU, then the former consent automatically expires as soon as the new consent request is authorised by the PSU. Optional Extension: As an option, an ASPSP might optionally accept a specific access right on the access on all psd2 related services for all available accounts. As another option an ASPSP might optionally also accept a command, where only access rights are inserted without mentioning the addressed account. The relation to accounts is then handled afterwards between PSU and ASPSP. This option is supported only within the Decoupled, OAuth2 or Re-direct SCA Approach. As a last option, an ASPSP might in addition accept a command with access rights * to see the list of available payment accounts or * to see the list of available payment accounts with balances."
          },
          "response": []
        },
        {
          "name": "2. Start the authorisation process for a consent",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "898a97c1-12fd-4166-82b5-9a8f4fc1106c",
                "exec": [
                  "pm.test(\"Status code is 201\", () => {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Sca status is started\", () => {",
                  "    pm.expect(jsonData.scaStatus).to.eql('started');",
                  "});",
                  "",
                  "// splits string link by '/' to array and gets the last element - authorisationId",
                  "// e.g. \"http://localhost:8080/v1/consents/d917f39f-6308-4f81-9b51-bfbd8bc934c6/authorisations/554fda7d-bc70-44da-8670-15e299f817a6\"",
                  "      // needs to get 554fda7d-bc70-44da-8670-15e299f817a6 value",
                  "const authorisationId = jsonData._links.startAuthorisationWithPsuAuthentication.split('/').pop();",
                  "",
                  "pm.globals.set(\"authorisation_id\", authorisationId);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "befc2b29-5dab-4f51-b077-032638f06ac0",
                "exec": [
                  "pm.globals.unset(\"authorisation_id\");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Request-ID",
                "value": "{{x_request_id}}"
              },
              {
                "key": "PSU-ID",
                "value": "{{psu_id_multiple_decoupled}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
              "protocol": "{{protocol}}",
              "host": [
                "{{url_xs2a}}"
              ],
              "path": [
                "v1",
                "consents",
                "{{consent_id}}",
                "authorisations"
              ]
            },
            "description": "Create an authorisation sub-resource and start the authorisation process of a consent. The message might in addition transmit authentication and authorisation related data. his method is iterated n times for a n times SCA authorisation in a corporate context, each creating an own authorisation sub-endpoint for the corresponding PSU authorising the consent. The ASPSP might make the usage of this access method unnecessary, since the related authorisation resource will be automatically created by the ASPSP after the submission of the consent data with the first POST consents call. The start authorisation process is a process which is needed for creating a new authorisation or cancellation sub-resource. This applies in the following scenarios: * The ASPSP has indicated with an ‘startAuthorisation’ hyperlink in the preceeding Payment Initiation Response that an explicit start of the authorisation process is needed by the TPP. The ‘startAuthorisation’ hyperlink can transport more information about data which needs to be uploaded by using the extended forms. * 'startAuthorisationWithPsuIdentfication’, * ‘startAuthorisationWithPsuAuthentication’ * ‘startAuthorisationWithAuthentciationMethodSelection’ * The related payment initiation cannot yet be executed since a multilevel SCA is mandated. * The ASPSP has indicated with an ‘startAuthorisation’ hyperlink in the preceeding Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP. The ‘startAuthorisation’ hyperlink can transport more information about data which needs to be uploaded by using the extended forms as indicated above. * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for executing the cancellation. * The signing basket needs to be authorised yet."
          },
          "response": []
        },
        {
          "name": "3. Update PSU Data - psuData",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a9ee083f-2b6d-42df-a671-49d5160d90ef",
                "exec": [
                  "pm.test(\"Status code is 200\", () => {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Sca status is psuAuthenticated\", () => {",
                  "    pm.expect(jsonData.scaStatus).to.eql('psuAuthenticated');",
                  "});",
                  "",
                  "pm.test(\"Select authentication method link exists\", () => {",
                  "    pm.expect(jsonData).to.have.property('_links');",
                  "    const _links = jsonData._links;",
                  "    pm.expect(_links).to.have.property('selectAuthenticationMethod');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Request-ID",
                "value": "{{x_request_id}}"
              },
              {
                "key": "PSU-ID",
                "value": "{{psu_id_multiple_decoupled}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
            },
            "url": {
              "raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
              "protocol": "{{protocol}}",
              "host": [
                "{{url_xs2a}}"
              ],
              "path": [
                "v1",
                "consents",
                "{{consent_id}}",
                "authorisations",
                "{{authorisation_id}}"
              ]
            },
            "description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
          },
          "response": []
        },
        {
          "name": "4. Update PSU Data - authenticationMethodId",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "42a2c2db-483b-47ec-a057-d735b04446e4",
                "exec": [
                  "pm.test(\"Status code is 200\", () => {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Sca status is scaMethodSelected\", () => {",
                  "    pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
                  "});",
                  "",
                  "pm.test(\"SCA status link exists\", () => {",
                  "    pm.expect(jsonData).to.have.property('_links');",
                  "    const _links = jsonData._links;",
                  "    pm.expect(_links).to.have.property('scaStatus');",
                  "});",
                  "",
                  "pm.test(\"PSU message is present\", () => {",
                  "    pm.expect(jsonData).to.have.property('psuMessage');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Request-ID",
                "value": "{{x_request_id}}"
              },
              {
                "key": "PSU-ID",
                "value": "{{psu_id_multiple_decoupled}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"authenticationMethodId\": \"push\"\n}"
            },
            "url": {
              "raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
              "protocol": "{{protocol}}",
              "host": [
                "{{url_xs2a}}"
              ],
              "path": [
                "v1",
                "consents",
                "{{consent_id}}",
                "authorisations",
                "{{authorisation_id}}"
              ]
            },
            "description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
          },
          "response": []
        }
      ]
    }
  ]
}
